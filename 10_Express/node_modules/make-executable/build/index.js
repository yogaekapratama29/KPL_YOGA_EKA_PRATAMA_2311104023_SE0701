"use strict";

exports.__esModule = true;
exports.getExecutableMode = getExecutableMode;
exports.makeExecutable = makeExecutable;
exports.makeExecutableSync = makeExecutableSync;

var _fs = require("fs");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getExecutableMode(mode) {
  if (mode === void 0) {
    mode = 0;
  }

  // eslint-disable-next-line no-bitwise
  return mode | _fs.constants.S_IXUSR | _fs.constants.S_IXGRP | _fs.constants.S_IXOTH;
}

function handleError(err) {
  if (err.code === "ENOENT") {
    return false;
  } else {
    return undefined;
  }
}

function makeExecutable(_x) {
  return _makeExecutable.apply(this, arguments);
}

function _makeExecutable() {
  _makeExecutable = _asyncToGenerator(function* (path) {
    try {
      var stats = yield _fs.promises.stat(path);
      yield _fs.promises.chmod(path, getExecutableMode(stats.mode));
      return true;
    } catch (err) {
      return handleError(err);
    }
  });
  return _makeExecutable.apply(this, arguments);
}

function makeExecutableSync(path) {
  try {
    var stats = (0, _fs.statSync)(path);
    (0, _fs.chmodSync)(path, getExecutableMode(stats.mode));
    return true;
  } catch (err) {
    return handleError(err);
  }
}