"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.credentials = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _nodeNetrc = _interopRequireDefault(require("node-netrc"));
var _utils = require("./utils");
var _config = require("./config");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function getStorageKey() {
    return _getStorageKey.apply(this, arguments);
}
function _getStorageKey() {
    _getStorageKey = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var _name, pkgName, locationHash;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    ;
                    _ctx.next = 3;
                    return _config.config.getPkgJson();
                case 3:
                    _ctx.t1 = _name = _ctx.sent.name;
                    _ctx.t0 = _ctx.t1 !== null;
                    if (!_ctx.t0) {
                        _ctx.next = 7;
                        break;
                    }
                    _ctx.t0 = _name !== void 0;
                case 7:
                    if (!_ctx.t0) {
                        _ctx.next = 11;
                        break;
                    }
                    _ctx.t2 = _name;
                    _ctx.next = 12;
                    break;
                case 11:
                    _ctx.t2 = "";
                case 12:
                    pkgName = _ctx.t2;
                    locationHash = Math.abs(+(0, _utils).hash((0, _config).getRoot()));
                    return _ctx.abrupt("return", [
                        "cli",
                        pkgName,
                        locationHash
                    ].filter(Boolean).join("."));
                case 15:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _getStorageKey.apply(this, arguments);
}
function set(_) {
    return _set.apply(this, arguments);
}
function _set() {
    _set = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(param) {
        var login, password, key;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    login = param.login, password = param.password;
                    _ctx.next = 3;
                    return getStorageKey();
                case 3:
                    key = _ctx.sent;
                    _nodeNetrc.default.update(key, {
                        login: login,
                        password: password
                    });
                case 5:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _set.apply(this, arguments);
}
function get() {
    return _get.apply(this, arguments);
}
function _get() {
    _get = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var key;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return getStorageKey();
                case 2:
                    key = _ctx.sent;
                    return _ctx.abrupt("return", (0, _nodeNetrc).default(key));
                case 4:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _get.apply(this, arguments);
}
function clear() {
    return _clear.apply(this, arguments);
}
function _clear() {
    _clear = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return set({
                        login: undefined,
                        password: undefined
                    });
                case 2:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _clear.apply(this, arguments);
}
var credentials = {
    get: get,
    set: set,
    clear: clear
};
exports.credentials = credentials;
