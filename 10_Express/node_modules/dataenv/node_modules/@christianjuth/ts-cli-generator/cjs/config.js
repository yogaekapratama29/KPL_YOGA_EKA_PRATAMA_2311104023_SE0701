"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setRoot = setRoot;
exports.getRoot = getRoot;
exports.config = void 0;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _findRoot = _interopRequireDefault(require("find-root"));
var _path = _interopRequireDefault(require("path"));
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var _root = process.cwd();
function setRoot(dir) {
    var r = (0, _findRoot).default(dir);
    _root = r;
}
function getRoot() {
    return _root;
}
function getPkgJson() {
    return _getPkgJson.apply(this, arguments);
}
function _getPkgJson() {
    _getPkgJson = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var root;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    root = getRoot();
                    _ctx.prev = 1;
                    _ctx.next = 4;
                    return require(_path.default.join(root, "package.json"));
                case 4:
                    return _ctx.abrupt("return", _ctx.sent);
                case 7:
                    _ctx.prev = 7;
                    _ctx.t0 = _ctx["catch"](1);
                    return _ctx.abrupt("return", {});
                case 10:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                1,
                7
            ]
        ]);
    }));
    return _getPkgJson.apply(this, arguments);
}
function getDataFile() {
    return _getDataFile.apply(this, arguments);
}
function _getDataFile() {
    _getDataFile = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var root;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    root = getRoot();
                    _ctx.prev = 1;
                    _ctx.next = 4;
                    return require(_path.default.join(root, ".cli", "cli.json"));
                case 4:
                    return _ctx.abrupt("return", _ctx.sent);
                case 7:
                    _ctx.prev = 7;
                    _ctx.t0 = _ctx["catch"](1);
                    console.log(_ctx.t0);
                    return _ctx.abrupt("return", []);
                case 11:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                1,
                7
            ]
        ]);
    }));
    return _getDataFile.apply(this, arguments);
}
var ENTRY_NAME = "index";
var cliRoot = "";
try {
    cliRoot = (0, _findRoot).default(process.cwd());
} catch (e) {}
var pkgRoot = "";
try {
    pkgRoot = (0, _findRoot).default(__dirname);
} catch (e1) {}
var INTERNAL_METHODS = [
    "__onStart__",
    "__version__",
    "__help__",
    "__beforeFn__", 
];
var config = {
    getOutputDir: function() {
        return _path.default.join(_root, ".cli");
    },
    packageName: "@christianjuth/ts-cli-generator",
    buildPackageExec: "ts-cli-generator build",
    cliRoot: cliRoot,
    tsEntry: _path.default.join(cliRoot, "".concat(ENTRY_NAME, ".ts")),
    getJsEntry: function() {
        return _path.default.join(_root, ".cli", "".concat(ENTRY_NAME, ".js"));
    },
    pkgRoot: pkgRoot,
    internalMethods: INTERNAL_METHODS,
    getDataFile: getDataFile,
    getPkgJson: getPkgJson
};
exports.config = config;
