"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.build = build;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _chmod = _interopRequireDefault(require("chmod"));
var _dedent = _interopRequireDefault(require("dedent"));
var _fs = require("fs");
var _kleur = _interopRequireDefault(require("kleur"));
var _nanospinner = require("nanospinner");
var _consts = require("nanospinner/consts");
var _path = _interopRequireDefault(require("path"));
var _config = require("./config");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj){
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "\n      #!/usr/bin/env node\n      import { cli } from \"./index\";\n      import { run } from \"",
        "\";\n      run(__dirname, cli);\n    "
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _taggedTemplateLiteral([
        "\n              Warning: CLI function exported name must match function definition name\n  \n              ",
        "\n              function ",
        "() {}\n  \n              export const cli = {\n                ",
        ",\n              }\n  \n              ",
        "\n              function ",
        "() {}\n  \n              export const cli = {\n                // don't rename functions\n                ",
        ": ",
        "\n              }\n            "
    ]);
    _templateObject1 = function _templateObject1() {
        return data;
    };
    return data;
}
function crawlRecursive(entry) {
    return _crawlRecursive.apply(this, arguments);
}
function _crawlRecursive() {
    _crawlRecursive = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(entry) {
        var visited, ref, dir, data, importRegEx, ref1, imps, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, imp1, ref2, importedFile, importedFilePath, _args = arguments;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    visited = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
                    ;
                    if (!visited[entry]) {
                        _ctx.next = 4;
                        break;
                    }
                    return _ctx.abrupt("return", visited);
                case 4:
                    visited[entry] = true;
                    dir = _path.default.dirname(entry);
                    data = "";
                    _ctx.prev = 7;
                    _ctx.next = 10;
                    return _fs.promises.readFile(entry + ".ts", "utf8");
                case 10:
                    data = _ctx.sent;
                    _ctx.next = 16;
                    break;
                case 13:
                    _ctx.prev = 13;
                    _ctx.t0 = _ctx["catch"](7);
                    return _ctx.abrupt("return", visited);
                case 16:
                    importRegEx = /import(?:['"\s]*([\w*${}\s,]+)from\s*)?['"\s]['"\s](.*[@\w_-]+)['"\s].*/gm;
                    ;
                    imps = (ref1 = (ref = data.match(importRegEx)) === null || ref === void 0 ? void 0 : ref.filter(function(imp) {
                        return /("|')\./.test(imp);
                    })) !== null && ref1 !== void 0 ? ref1 : [];
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _ctx.prev = 20;
                    _iterator = imps[Symbol.iterator]();
                case 22:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _ctx.next = 34;
                        break;
                    }
                    imp1 = _step.value;
                    ;
                    importedFile = (ref2 = imp1.match(/(".+"|'.+')/)) === null || ref2 === void 0 ? void 0 : ref2[0];
                    if (!importedFile) {
                        _ctx.next = 31;
                        break;
                    }
                    importedFile = importedFile.replace(/("|')/g, "");
                    importedFilePath = _path.default.join(dir, importedFile);
                    _ctx.next = 31;
                    return crawlRecursive(importedFilePath, visited);
                case 31:
                    _iteratorNormalCompletion = true;
                    _ctx.next = 22;
                    break;
                case 34:
                    _ctx.next = 40;
                    break;
                case 36:
                    _ctx.prev = 36;
                    _ctx.t1 = _ctx["catch"](20);
                    _didIteratorError = true;
                    _iteratorError = _ctx.t1;
                case 40:
                    _ctx.prev = 40;
                    _ctx.prev = 41;
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                case 43:
                    _ctx.prev = 43;
                    if (!_didIteratorError) {
                        _ctx.next = 46;
                        break;
                    }
                    throw _iteratorError;
                case 46:
                    return _ctx.finish(43);
                case 47:
                    return _ctx.finish(40);
                case 48:
                    return _ctx.abrupt("return", visited);
                case 49:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                7,
                13
            ],
            [
                20,
                36,
                40,
                48
            ],
            [
                41,
                ,
                43,
                47
            ]
        ]);
    }));
    return _crawlRecursive.apply(this, arguments);
}
function crawl(entry) {
    return _crawl.apply(this, arguments);
}
function _crawl() {
    _crawl = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(entry) {
        var visited;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return crawlRecursive(entry.replace(/\.ts$/, ""));
                case 2:
                    visited = _ctx.sent;
                    return _ctx.abrupt("return", Object.keys(visited).map(function(imp) {
                        return "".concat(imp, ".ts");
                    }));
                case 4:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _crawl.apply(this, arguments);
}
function uuid() {
    var randomString = function randomString() {
        return Math.random().toString(36).substring(2);
    };
    return Array(4).fill(0).map(randomString).join("-");
}
function buildTypeScript(tmpBuiltPath) {
    return _buildTypeScript.apply(this, arguments);
}
function _buildTypeScript() {
    _buildTypeScript = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee(tmpBuiltPath) {
        var ts, emitSpinner, program;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return Promise.resolve().then(function() {
                        return _interopRequireWildcard(require("ts-morph"));
                    });
                case 2:
                    ts = _ctx.sent.ts;
                    _ctx.next = 5;
                    return _fs.promises.writeFile(tmpBuiltPath, (0, _dedent).default(_templateObject(), _config.config.packageName));
                case 5:
                    try {
                        emitSpinner = (0, _nanospinner).createSpinner("Emitting CLI build");
                        program = ts.createProgram([
                            tmpBuiltPath
                        ], {
                            module: ts.ModuleKind.CommonJS,
                            sourceMap: false,
                            outDir: _config.config.getOutputDir()
                        });
                        program.emit();
                        _fs.promises.unlink(tmpBuiltPath);
                        tmpBuiltPath = tmpBuiltPath.replace(/\.ts$/, ".js");
                        (0, _chmod).default(_path.default.join(_config.config.getOutputDir(), tmpBuiltPath), {
                            execute: true
                        });
                        _fs.promises.rename(_path.default.join(_config.config.getOutputDir(), tmpBuiltPath), _path.default.join(_config.config.getOutputDir(), "cli.js"));
                        emitSpinner.success();
                    } catch (e) {
                        console.log(e);
                        // cleanup
                        _fs.promises.unlink(tmpBuiltPath);
                    }
                case 6:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _buildTypeScript.apply(this, arguments);
}
function buildCli() {
    return _buildCli.apply(this, arguments);
}
function _buildCli() {
    _buildCli = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var Project, detectingTypesspinner, project, files, functions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, path, file, _key, key1, fns, definitions, buildParamTypes, cli, warning, file1, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, fn1, ref, name1, ref3, ref4, matchingFnExportName, matchingFn, ref5, description, params, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, param1, writingFileSpinner;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    buildParamTypes = function _buildParamTypes(type, extraInfo) {
                        var node = extraInfo.node, key = extraInfo.key;
                        var _name;
                        var name = (_name = extraInfo.name) !== null && _name !== void 0 ? _name : "";
                        var types = (type.isUnion() ? type.getUnionTypes() : [
                            type
                        ]).map(function(unionType) {
                            var unionTypeName = unionType.getText();
                            if (unionType.isLiteral()) {
                                var aparentType = unionType.getApparentType().getText().toLowerCase();
                                switch(aparentType){
                                    case "string":
                                        var str = unionType.getText().replace(/(^("|'|`)|("|'|`)$)/g, "");
                                        return "string:".concat(str);
                                    case "number":
                                        var num = unionType.getText();
                                        return "string:".concat(num);
                                    default:
                                        return aparentType;
                                }
                            }
                            switch(unionTypeName.toLowerCase()){
                                case "string":
                                case "number":
                                // case "bigint"
                                case "boolean":
                                case "null":
                                case "undefined":
                                    // case "symbol":
                                    return unionTypeName;
                            }
                            // fall back to object
                            if (node) {
                                var properties = unionType.getProperties().map(function(t) {
                                    return buildParamTypes(t.getTypeAtLocation(node), {
                                        name: "".concat(name, ".").concat(t.getName()),
                                        key: t.getName()
                                    });
                                });
                                var obj = {
                                    name: name,
                                    object: properties
                                };
                                return obj;
                            }
                        // TODO: handle array type
                        }).filter(function(value, index, array) {
                            return array.indexOf(value) === index;
                        });
                        var output = {
                            name: name,
                            key: key,
                            types: types
                        };
                        return output;
                    };
                    _ctx.next = 3;
                    return Promise.resolve().then(function() {
                        return _interopRequireWildcard(require("ts-morph"));
                    });
                case 3:
                    Project = _ctx.sent.Project;
                    detectingTypesspinner = (0, _nanospinner).createSpinner("Detecting CLI commands").start();
                    project = new Project({
                        compilerOptions: {
                            outDir: "dist",
                            declaration: true,
                            strict: true
                        }
                    });
                    _ctx.next = 8;
                    return crawl(_config.config.tsEntry);
                case 8:
                    files = _ctx.sent;
                    functions = {};
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _ctx.prev = 11;
                    _iterator = files[Symbol.iterator]();
                case 13:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _ctx.next = 31;
                        break;
                    }
                    path = _step.value;
                    project.addSourceFilesAtPaths(path);
                    file = project.getSourceFile(path);
                    if (file) {
                        _ctx.next = 21;
                        break;
                    }
                    {
                        console.error(_kleur.default.red("".concat(path, " does not exsist")));
                    }
                    _ctx.next = 28;
                    break;
                case 21:
                    ;
                    key1 = path.replace(_config.config.cliRoot, "").replace(/\.ts/, "");
                    if (!functions[key1]) {
                        _ctx.next = 25;
                        break;
                    }
                    throw Error("encountered duplicate file ".concat(file));
                case 25:
                    functions[key1] = [];
                    fns = file.getFunctions().filter(function(fn) {
                        var name = fn.getName();
                        return name && !_config.config.internalMethods.includes(name);
                    });
                    (_key = functions[key1]).push.apply(_key, _toConsumableArray(fns));
                case 28:
                    _iteratorNormalCompletion = true;
                    _ctx.next = 13;
                    break;
                case 31:
                    _ctx.next = 37;
                    break;
                case 33:
                    _ctx.prev = 33;
                    _ctx.t0 = _ctx["catch"](11);
                    _didIteratorError = true;
                    _iteratorError = _ctx.t0;
                case 37:
                    _ctx.prev = 37;
                    _ctx.prev = 38;
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                case 40:
                    _ctx.prev = 40;
                    if (!_didIteratorError) {
                        _ctx.next = 43;
                        break;
                    }
                    throw _iteratorError;
                case 43:
                    return _ctx.finish(40);
                case 44:
                    return _ctx.finish(37);
                case 45:
                    definitions = [];
                    ;
                    _ctx.next = 49;
                    return require(_config.config.getJsEntry());
                case 49:
                    cli = _ctx.sent.cli;
                    warning = false;
                    _ctx.t1 = regeneratorRuntime.keys(functions);
                case 52:
                    if ((_ctx.t2 = _ctx.t1()).done) {
                        _ctx.next = 112;
                        break;
                    }
                    file1 = _ctx.t2.value;
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    _ctx.prev = 55;
                    _iterator1 = functions[file1][Symbol.iterator]();
                case 57:
                    if (_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done) {
                        _ctx.next = 96;
                        break;
                    }
                    fn1 = _step1.value;
                    ;
                    name1 = fn1.getName();
                    if (name1) {
                        _ctx.next = 65;
                        break;
                    }
                    warning = true;
                    console.warn(_kleur.default.yellow("Warning: CLI functions must be named functions"));
                    return _ctx.abrupt("continue", 93);
                case 65:
                    ;
                    ref4 = _slicedToArray((ref3 = Object.entries(cli).find(function(param) {
                        var _param = _slicedToArray(param, 2), _ = _param[0], fn = _param[1];
                        return fn.name === name1;
                    })) !== null && ref3 !== void 0 ? ref3 : [], 2), matchingFnExportName = ref4[0], matchingFn = ref4[1];
                    if (!(!cli[name1] && matchingFn !== undefined)) {
                        _ctx.next = 71;
                        break;
                    }
                    warning = true;
                    console.warn("\n" + _kleur.default.yellow((0, _dedent).default(_templateObject1(), _kleur.default.bold("Correct"), name1, name1, _kleur.default.bold("Incorrect"), name1, matchingFnExportName, name1)));
                    return _ctx.abrupt("continue", 93);
                case 71:
                    ;
                    description = (ref5 = (ref = fn1.getJsDocs().at(0)) === null || ref === void 0 ? void 0 : ref.getDescription()) !== null && ref5 !== void 0 ? ref5 : "";
                    if (description === "undefined") {
                        description = "";
                    }
                    params = [];
                    _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                    _ctx.prev = 76;
                    for(_iterator2 = fn1.getParameters()[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                        param1 = _step2.value;
                        params.push(buildParamTypes(param1.getType(), {
                            node: param1,
                            name: param1.getName()
                        }));
                    }
                    _ctx.next = 84;
                    break;
                case 80:
                    _ctx.prev = 80;
                    _ctx.t3 = _ctx["catch"](76);
                    _didIteratorError2 = true;
                    _iteratorError2 = _ctx.t3;
                case 84:
                    _ctx.prev = 84;
                    _ctx.prev = 85;
                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                    }
                case 87:
                    _ctx.prev = 87;
                    if (!_didIteratorError2) {
                        _ctx.next = 90;
                        break;
                    }
                    throw _iteratorError2;
                case 90:
                    return _ctx.finish(87);
                case 91:
                    return _ctx.finish(84);
                case 92:
                    if (name1) {
                        definitions.push({
                            params: params,
                            description: (0, _dedent).default(description).replace("\n", " "),
                            file: file1.replace(/^\//, ""),
                            name: name1
                        });
                    }
                case 93:
                    _iteratorNormalCompletion1 = true;
                    _ctx.next = 57;
                    break;
                case 96:
                    _ctx.next = 102;
                    break;
                case 98:
                    _ctx.prev = 98;
                    _ctx.t4 = _ctx["catch"](55);
                    _didIteratorError1 = true;
                    _iteratorError1 = _ctx.t4;
                case 102:
                    _ctx.prev = 102;
                    _ctx.prev = 103;
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                case 105:
                    _ctx.prev = 105;
                    if (!_didIteratorError1) {
                        _ctx.next = 108;
                        break;
                    }
                    throw _iteratorError1;
                case 108:
                    return _ctx.finish(105);
                case 109:
                    return _ctx.finish(102);
                case 110:
                    _ctx.next = 52;
                    break;
                case 112:
                    if (warning) {
                        // @ts-ignore
                        detectingTypesspinner.success({
                            mark: _kleur.default.yellow(_consts.symbols.tick)
                        });
                    } else {
                        detectingTypesspinner.success();
                    }
                    writingFileSpinner = (0, _nanospinner).createSpinner("Writing CLI data files").start();
                    _ctx.next = 116;
                    return _fs.promises.writeFile(_path.default.join(_config.config.getOutputDir(), "cli.json"), JSON.stringify(definitions, null, 2));
                case 116:
                    writingFileSpinner.success();
                case 117:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                11,
                33,
                37,
                45
            ],
            [
                38,
                ,
                40,
                44
            ],
            [
                55,
                98,
                102,
                110
            ],
            [
                76,
                80,
                84,
                92
            ],
            [
                85,
                ,
                87,
                91
            ],
            [
                103,
                ,
                105,
                109
            ]
        ]);
    }));
    return _buildCli.apply(this, arguments);
}
function build() {
    return _build.apply(this, arguments);
}
function _build() {
    _build = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var tmpBuiltPath;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.prev = 0;
                    _ctx.next = 3;
                    return _fs.promises.mkdir(_config.config.getOutputDir(), {
                        recursive: false
                    });
                case 3:
                    _ctx.next = 7;
                    break;
                case 5:
                    _ctx.prev = 5;
                    _ctx.t0 = _ctx["catch"](0);
                case 7:
                    tmpBuiltPath = ".".concat(uuid(), ".tmp.ts");
                    _ctx.next = 10;
                    return buildTypeScript(tmpBuiltPath);
                case 10:
                    _ctx.next = 12;
                    return buildCli();
                case 12:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                0,
                5
            ]
        ]);
    }));
    return _build.apply(this, arguments);
}
