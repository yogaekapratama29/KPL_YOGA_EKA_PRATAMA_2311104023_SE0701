"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init = init;
var _regeneratorRuntime = _interopRequireDefault(require("regenerator-runtime"));
var _fs = require("fs");
var _prompts = _interopRequireDefault(require("prompts"));
var _path = _interopRequireDefault(require("path"));
var _dedent = _interopRequireDefault(require("dedent"));
var _childProcess = require("child_process");
var _kleur = _interopRequireDefault(require("kleur"));
var _config = require("./config");
var _nanospinner = require("nanospinner");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
function _templateObject() {
    var data = _taggedTemplateLiteral([
        "\n    import { CLI } from \"@christianjuth/ts-cli-generator\";\n\n    /**\n     * Add two numbers\n     */\n    function add(x: number, y: number) {\n      console.log(x + y);\n    }\n    \n    export const cli: CLI = {\n      add,\n    };\n  "
    ]);
    _templateObject = function _templateObject() {
        return data;
    };
    return data;
}
function _templateObject1() {
    var data = _taggedTemplateLiteral([
        "\n      # ",
        "\n\n      ### Run CLI\n      ",
        "bash\n        npm start\n      ",
        "\n\n      ### Run with nodemon\n      ",
        "bash\n        npm run dev\n      ",
        "\n\n      ### Build\n      ",
        "bash\n        npm run build\n      ",
        "\n\n      ### Install CLI locally\n      ",
        "bash\n        # (make sure you build before linking)\n        npm link\n        ",
        "\n      ",
        "\n    "
    ]);
    _templateObject1 = function _templateObject1() {
        return data;
    };
    return data;
}
function _templateObject2() {
    var data = _taggedTemplateLiteral([
        "\n      # Logs\n      logs\n      *.log\n      npm-debug.log*\n\n      # Node\n      node_modules/\n\n      # Mac\n      .DS_Store\n\n      # Builds\n      *.tmp.ts\n    "
    ]);
    _templateObject2 = function _templateObject2() {
        return data;
    };
    return data;
}
function _templateObject3() {
    var data = _taggedTemplateLiteral([
        "\n          ",
        "\n            # navigate to project\n            ",
        "\n  \n            # edit index.ts\n  \n          ",
        "\n            # Run CLI\n            ",
        "\n\n            # Run with nodemon\n            ",
        "\n  \n            # Build\n            ",
        "\n  \n            # Install CLI locally\n            # (make sure you build before linking)\n            ",
        "\n            ",
        " \n        "
    ]);
    _templateObject3 = function _templateObject3() {
        return data;
    };
    return data;
}
var CODE_BLOCK = "```";
function init() {
    return _init.apply(this, arguments);
}
function _init() {
    _init = _asyncToGenerator(_regeneratorRuntime.default.mark(function _callee() {
        var name1, indexData, templateDeps, templateDevDeps, templates, template1, ref, dependencies, devDependencies, creatingFilesSpinner, pjson, tsConfig, npmInstallSpinner;
        return _regeneratorRuntime.default.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return (0, _prompts).default({
                        type: "text",
                        name: "name",
                        message: "Enter a name for your cli"
                    });
                case 2:
                    name1 = _ctx.sent.name;
                    indexData = (0, _dedent).default(_templateObject());
                    templateDeps = {};
                    templateDevDeps = {};
                    _ctx.prev = 6;
                    _ctx.next = 9;
                    return _fs.promises.readdir(_path.default.join(_config.config.pkgRoot, "examples"));
                case 9:
                    templates = _ctx.sent.filter(function(name) {
                        return name[0] !== ".";
                    });
                    _ctx.next = 12;
                    return (0, _prompts).default({
                        type: "select",
                        name: "template",
                        message: "Pick a template",
                        choices: templates.map(function(template) {
                            return {
                                title: template,
                                value: template
                            };
                        })
                    });
                case 12:
                    template1 = _ctx.sent.template;
                    _ctx.next = 15;
                    return _fs.promises.readFile(_path.default.join(_config.config.pkgRoot, "examples", template1, "index.ts"));
                case 15:
                    indexData = _ctx.sent.toString();
                    _ctx.next = 18;
                    return require(_path.default.join(_config.config.pkgRoot, "examples", template1, "package.json"));
                case 18:
                    ref = _ctx.sent;
                    dependencies = ref.dependencies;
                    devDependencies = ref.devDependencies;
                    templateDeps = dependencies;
                    templateDevDeps = devDependencies;
                    _ctx.next = 27;
                    break;
                case 25:
                    _ctx.prev = 25;
                    _ctx.t0 = _ctx["catch"](6);
                case 27:
                    creatingFilesSpinner = (0, _nanospinner).createSpinner("Creating project files").start();
                    _ctx.next = 30;
                    return _fs.promises.mkdir(name1, {
                        recursive: false
                    });
                case 30:
                    _ctx.next = 32;
                    return _fs.promises.writeFile(_path.default.join(name1, "index.ts"), indexData);
                case 32:
                    pjson = {
                        name: name1,
                        version: "0.0.0",
                        main: "./.cli/cli.js",
                        bin: "./.cli/cli.js",
                        files: [
                            ".cli",
                            "README.md"
                        ],
                        scripts: {
                            build: _config.config.buildPackageExec,
                            start: "".concat(_config.config.buildPackageExec, " && node ."),
                            dev: "nodemon -e ts --ignore *.tmp.ts -x '".concat(_config.config.buildPackageExec, " && node . $1'")
                        },
                        devDependencies: _objectSpread({}, templateDevDeps, {
                            nodemon: "2.x",
                            "ts-morph": "13.x",
                            typescript: "*"
                        }),
                        dependencies: _objectSpread({}, templateDeps, _defineProperty({}, _config.config.packageName, "*"))
                    };
                    _ctx.next = 35;
                    return _fs.promises.writeFile(_path.default.join(name1, "package.json"), JSON.stringify(pjson, null, 2));
                case 35:
                    _ctx.next = 37;
                    return _fs.promises.writeFile(_path.default.join(name1, "README.md"), (0, _dedent).default(_templateObject1(), name1, CODE_BLOCK, CODE_BLOCK, CODE_BLOCK, CODE_BLOCK, CODE_BLOCK, CODE_BLOCK, CODE_BLOCK, name1, CODE_BLOCK));
                case 37:
                    _ctx.next = 39;
                    return _fs.promises.writeFile(_path.default.join(name1, ".gitignore"), (0, _dedent).default(_templateObject2()));
                case 39:
                    tsConfig = {
                        compilerOptions: {
                            noImplicitAny: true,
                            strict: true,
                            lib: [
                                "ESNext",
                                "DOM"
                            ]
                        },
                        exclude: [
                            "node_modules"
                        ]
                    };
                    _ctx.next = 42;
                    return _fs.promises.writeFile(_path.default.join(name1, "tsconfig.json"), JSON.stringify(tsConfig, null, 2));
                case 42:
                    creatingFilesSpinner.success();
                    npmInstallSpinner = (0, _nanospinner).createSpinner("Installing npm dependencies").start();
                    (0, _childProcess).exec("npm install", {
                        cwd: name1
                    }, function() {
                        npmInstallSpinner.success();
                        console.log("\n" + (0, _dedent).default(_templateObject3(), _kleur.default.bold("Getting started"), _kleur.default.green("cd ".concat(name1)), _kleur.default.bold("Commands"), _kleur.default.green("npm start"), _kleur.default.green("npm run dev"), _kleur.default.green("npm run build"), _kleur.default.green("npm link"), _kleur.default.green(name1)) + "\n");
                        (0, _childProcess).exec("git init", {
                            cwd: name1
                        });
                    });
                case 45:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                6,
                25
            ]
        ]);
    }));
    return _init.apply(this, arguments);
}
