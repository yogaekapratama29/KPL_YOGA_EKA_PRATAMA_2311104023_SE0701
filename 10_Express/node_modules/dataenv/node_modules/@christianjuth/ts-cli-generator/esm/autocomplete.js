import regeneratorRuntime from "regenerator-runtime";
import omelette from "omelette";
import { config } from "./config";
import { camelCaseToHyphen, promiseExec, spinner } from "./utils";
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function createShortcuts() {
    return _createShortcuts.apply(this, arguments);
}
function _createShortcuts() {
    _createShortcuts = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var fns, pkgJson, data, commands, internalCommands, complete, _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    fns = _args.length > 0 && _args[0] !== void 0 ? _args[0] : {};
                    _ctx.next = 3;
                    return config.getPkgJson();
                case 3:
                    pkgJson = _ctx.sent;
                    _ctx.next = 6;
                    return config.getDataFile();
                case 6:
                    data = _ctx.sent;
                    commands = Object.values(fns).filter(function(fn) {
                        return fn.name[0] !== "_";
                    }).map(function(fn) {
                        return camelCaseToHyphen(fn.name);
                    });
                    internalCommands = [
                        "help",
                        "autocomplete"
                    ];
                    complete = omelette("".concat(pkgJson.name, " <command>"));
                    complete.on("command", function(param) {
                        var reply = param.reply;
                        reply(_toConsumableArray(commands).concat(_toConsumableArray(internalCommands)));
                    });
                    return _ctx.abrupt("return", complete);
                case 12:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _createShortcuts.apply(this, arguments);
}
function listen(fns) {
    return _listen.apply(this, arguments);
}
function _listen() {
    _listen = _asyncToGenerator(regeneratorRuntime.mark(function _callee(fns) {
        var complete;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.next = 2;
                    return createShortcuts(fns);
                case 2:
                    complete = _ctx.sent;
                    complete.init();
                case 4:
                case "end":
                    return _ctx.stop();
            }
        }, _callee);
    }));
    return _listen.apply(this, arguments);
}
function uninstall() {
    return _uninstall.apply(this, arguments);
}
function _uninstall() {
    _uninstall = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var complete;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.prev = 0;
                    _ctx.next = 3;
                    return createShortcuts();
                case 3:
                    complete = _ctx.sent;
                    complete.cleanupShellInitFile();
                    _ctx.next = 10;
                    break;
                case 7:
                    _ctx.prev = 7;
                    _ctx.t0 = _ctx["catch"](0);
                    console.log(_ctx.t0);
                case 10:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                0,
                7
            ]
        ]);
    }));
    return _uninstall.apply(this, arguments);
}
function install() {
    return _install.apply(this, arguments);
}
function _install() {
    _install = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var complete;
        return regeneratorRuntime.wrap(function _callee$(_ctx) {
            while(1)switch(_ctx.prev = _ctx.next){
                case 0:
                    _ctx.prev = 0;
                    _ctx.next = 3;
                    return createShortcuts();
                case 3:
                    complete = _ctx.sent;
                    complete.setupShellInitFile();
                    _ctx.next = 10;
                    break;
                case 7:
                    _ctx.prev = 7;
                    _ctx.t0 = _ctx["catch"](0);
                    console.log(_ctx.t0);
                case 10:
                case "end":
                    return _ctx.stop();
            }
        }, _callee, null, [
            [
                0,
                7
            ]
        ]);
    }));
    return _install.apply(this, arguments);
}
function setup() {
    return _setup.apply(this, arguments);
}
function _setup() {
    _setup = _asyncToGenerator(regeneratorRuntime.mark(function _callee1() {
        var pkgJson, name;
        return regeneratorRuntime.wrap(function _callee$(_ctx1) {
            while(1)switch(_ctx1.prev = _ctx1.next){
                case 0:
                    _ctx1.next = 2;
                    return config.getPkgJson();
                case 2:
                    pkgJson = _ctx1.sent;
                    name = pkgJson.name;
                    _ctx1.next = 6;
                    return spinner({
                        name: "Updating shell config"
                    }, _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                        return regeneratorRuntime.wrap(function _callee$(_ctx) {
                            while(1)switch(_ctx.prev = _ctx.next){
                                case 0:
                                    if (!name) {
                                        _ctx.next = 3;
                                        break;
                                    }
                                    _ctx.next = 3;
                                    return promiseExec("".concat(name, " autocomplete disable"));
                                case 3:
                                    install();
                                case 4:
                                case "end":
                                    return _ctx.stop();
                            }
                        }, _callee);
                    })));
                case 6:
                case "end":
                    return _ctx1.stop();
            }
        }, _callee1);
    }));
    return _setup.apply(this, arguments);
}
export var autocomplete = {
    setup: setup,
    uninstall: uninstall,
    listen: listen
};
